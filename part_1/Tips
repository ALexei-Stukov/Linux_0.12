第一个部分基本没有难度，不过仍有细节需要介绍。

关于：
    段基地址BOOTSEG =   0x7c0
    
    ------------------------------【为什么BOOTSEG不能是别的值呢？】------------------------------
    
    这是为了配合bios。
    
    对于x86架构来说，当计算机通电，bios开始执行后，会主动把引导扇区加载到0x7c00这个位置。（对应的段基地址就是0x7c0）
    
    这是历史遗留问题，最好是沿用下来。

    ------------------------------【为什么bios会把引导程序加载到 0x7c00呢？】------------------------------
    
    早期的8088 CPU只有16位寄存器，但是却有20位地址总线。
    
    简而言之，早期CPU的一次直接寻址能覆盖16位，一次间接寻址可以覆盖20位。
    
    按照16位寻址空间计算，那么地址范围是：0x0000 - 0xFFFF，地址空间大小为64KB。 
    
    但是当时内存比较昂贵，32KB大小的内存还是主流。所以工程师们不得不假设：用户的电脑最低只有32KB内存。并在此基础之上进行系统构建。
    
    对于32KB的内存来说，地址范围是：0x0000 - 0x7FFF。

    首先，cpu会占用 0x0000 - 0x03FF,用于保存中断处理程序。于是可选的地址范围还剩下 0x0400 - 0x7FFF。
    
    其次，为了预留尽可能多的连续内存给操作系统，那么引导程序将被加载到地址的末尾。
    
    最后，引导扇区本身需要512Byte，而执行这部分代码又需要预留一些其他空间，可以认为需要512Byte的额外空间。从逻辑上来讲，额外空间也应该在地址的末尾附近。
    
    最终，引导程序的加载位置就变成了 0x7FFF - 512 - 512 + 1 = 0x7C00

    ------------------------------【为什么运行引导程序需要额外的512Byte的空间？】------------------------------
    
    早期的系统很小，引导扇区可以承担很多工作。为了让引导扇区能正常工作，一般会多配1个扇区，也就是额外准备512 Byte。
    
    如今，很多工作已经从引导扇区分离出去了。即使不依赖其它空间，引导扇区的代码也能运行。
    
    对于我们目前的“Hello World”引导程序，其实不需要额外空间。

    